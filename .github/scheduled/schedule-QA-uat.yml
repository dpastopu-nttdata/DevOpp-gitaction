name: QA schedule UAT

on:
    # workflow_dispatch allows to manual run the workflow
    workflow_dispatch:
    schedule:
        # At 01:00 every day
        - cron: "0 1 * * *"

jobs:
    qa_uat:
        # MODIFY TO CORRECT ENVIRONMENTS
        # The type of runner that the job will run on
        runs-on: ubuntu-latest
        env:
            SFDX_JSON_TO_STDOUT: true
            SFDX_AUTOUPDATE_DISABLE: true
            SFDX_USE_GENERIC_UNIX_KEYCHAIN: true

        # Steps represent a sequence of tasks that will be executed as part of the job
        steps:
            # Checks-out source branch of the pull request
            - uses: actions/checkout@v2
              with:
                  ref: uat
            - uses: actions/setup-node@v2
              with:
                  node-version: "16"
                  cache: "npm"
            - name: Install Salesforce CLI
              run: |
                  sudo npm install sfdx-cli@${{ secrets[env.SFDXCLI] }} --global
                  sfdx version --verbose --json
              env:
                  SFDXCLI: "SALESFORCE_SFDXCLI_VERSION"
            - name: Authenticate
              run: |
                  echo "${{ secrets[env.JWT] }}" > server.key
                  sfdx force:auth:jwt:grant --clientid  ${{ secrets[env.ORG] }} --jwtkeyfile server.key --username ${{ secrets[env.USER] }} --instanceurl https://test.salesforce.com -a environment -s
              env:
                  JWT: "SALESFORCE_JWT_SECRET_KEY"
                  ORG: "SALESFORCE_UAT_CLIENT_ID"
                  USER: "SALESFORCE_UAT_USER_NAME"
            - name: Checkout private repository
              uses: actions/checkout@v2
              with:
                  repository: ${{ secrets.PMD_EXTERNAL_REPO }}
                  token: ${{ secrets.PMD_EXTERNAL_REPO_TOKEN }}
                  path: master
            - name: Run PMD
              run: |
                  chmod +x ./master/pmd-bin/bin/run.sh
                  "./master/pmd-bin/bin/run.sh" pmd -d "./force-app/main/default" -f xml -l apex -R "./master/rules/all-apex.xml" -failOnViolation false> pmdRevision.xml
            - name: Install modules
              run: yarn install --no-lockfile
            - name: Install Jest unit testing tools
              run: |
                  sfdx force:lightning:lwc:test:setup
            - name: Validate LWC
              run: |
                  npx jest --passWithNoTests force-app/main/default/lwc
            - name: Run tests
              run: |
                  sfdx force:apex:test:run -c -r json -d testResults -u environment -w 60 || true
            - name: Check Quality
              run: |
              #    pull_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
              #    export SONAR_SCANNER_VERSION=4.4.0.2170
              #    export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux
              #    curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip
              #    unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
              #    export PATH=$SONAR_SCANNER_HOME/bin:$PATH
              #    export SONAR_SCANNER_OPTS="-server"  
              #    echo "sonar-scanner -Dsonar.organization=seatcode -Dsonar.projectKey=seatcode_salesforce-germany -Dsonar.sources=force-app/main/default -Dsonar.host.url=https://sonarcloud.io -Dsonar.exclusions=force-app/main/default/**/*.xml -Dsonar.pullrequest.branch= ${{ github.ref }} -Dsonar.pullrequest.key= $pull_number -Dsonar.pullrequest.base= ${{ github.base_ref }}"
              #    sonar-scanner \
              #    -Dsonar.organization=seatcode \
              #    -Dsonar.projectKey=seatcode_salesforce-germany \
              #    -Dsonar.sources=force-app/main/default \
              #    -Dsonar.host.url=https://sonarcloud.io \
              #    -Dsonar.exclusions=force-app/main/default/**/*.xml \
              #    -Dsonar.branch.name=uat \
              #    -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }} \
              #    -Dsonar.eslint.reportPaths=eslintLWC.json,auraEslint.json \
              #    -Dsonar.apex.pmd.reportPaths=pmdRevision.xml \
              #    -Dsonar.apex.coverage.reportPath=testResults/test-result-codecoverage.json \
              #    -Dsonar.coverage.exclusions=force-app/main/default/classes/*Test.cls,force-app/main/default/**/*.js,force-app/main/default/classes/*Test*.cls,force-app/main/default/classes/Test*.cls
            - name: Store test results
              if: ${{ always() }}
              uses: actions/upload-artifact@v2
              with:
                  name: tests
                  path: |
                      testResults
            - name: Install Cypress related tools & authorize agents
              run: |
              #    npm install -D cypress-xpath
              #    sfdx force:auth:jwt:grant --clientid ${{ secrets.SALESFORCE_UAT_CLIENT_ID }} --jwtkeyfile server.key --username ${{ secrets.CYPRESS_AGENT_USERS }} --instanceurl https://test.salesforce.com -a userAgent
            - name: Cypress.io
              #uses: cypress-io/github-action@v2
              #with: 
              #    browser: chrome
              #    headless: true
              #    record: true
              #    project: ./cypress-project
              #env:
              #    CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
            - name: Delete records from Regression Tests
              run: |
              #    Object=`jq --raw-output .SObject ./cypress-project/recordData.json`
              #    ObjectID=`jq --raw-output .Id ./cypress-project/recordData.json`
              #    sfdx force:data:record:delete -s $Object -i $ObjectID --perflog --json
